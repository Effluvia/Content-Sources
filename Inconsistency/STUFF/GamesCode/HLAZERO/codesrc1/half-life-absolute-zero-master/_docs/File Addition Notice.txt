
Beyond the .h & .cpp files necessary for new entities (Chumtoad + Weapon, HAssault, Friendly, Kingpin, etc.), some other files have been made to make the project easier to understand and more maintainable.

CLIENTSIDE (cl_dll)
-hudbase.h (no .cpp file). Contains the CHudBase class, moved here from hud.h, needed by various child classes of CHudBase. Also has some other things (constants mainly) commonly needed throughout CHudBase children. This lets hud.h and other child classes both take the essentials without lots of redefinition errors for all kinds of other stuff in hud.h.

-custom_mssage.h & .cpp - Stores some client message receiver methods and setup from ammo.cpp, an improper place for holding some messages not relevant to ammo, weapons, nor pickups. ammo.cpp has long since been a place for putting new client features. The power canisters (adrenaline, radiation, antidote) and airtank UI still seem fitting in ammo.cpp regardless, but this can be changed.

-util.cpp renamed to cl_util.cpp, to match cl_util.h.

-weapons_resource.h & .cpp - holds the "WeaponsResource" class that used to be seen throughout ammohistory.h and ammo.cpp.  No clue.
*side-note: to make the "gpActiveSel" & "gpLastSel" available, as well as "gWR", the WeaponsResource instance, the gWR variable has been moved to the CHudAmmo class and the gpActiveSel & gpLastSel variables have been moved to the WeaponsResource class (ammohostiry.h), both from ammo.cpp to be accessible outside of ammo.cpp.
 That means throughout some parts of ammo.cpp, references had to be done through the closest known instance instead, which means no change for accessing gpActiveSel & gpLastSel from any WeaponsResource methods (already instances of the class), need "gWR." in front to access the gp vars from CHudAmmo methods (its own WeaponsResource instance), and need "gHUD.m_Ammo.gWR." in front to access gp vars from anywhere else. This gets them through the GUI instance, the ammo instance, and then the WeaponsResource instance. custom_message.cpp needed to be able to access the gp's this way.
*Also, the CHudAmmo class has been moved from hud.h to ammo.h. A few includes could be reword to go at the top since they no longer rely on occuring at such a specific place with the right things included ahead of time by an outside context... what.

-hud/pain.h & .cpp - pain-related script from health.cpp moved here.

-hl_weapons.h - header file for hl_weapons.cpp, for other new files to access globals from hl_weapons.cpp.
-hl/cl_player.h/.cpp, hl/cl_weapons.h/.cpp - Implementations of CBasePlayer and CBasePlayerWeapon methods moved from hl_weapons.cpp for neatness.




SERVERSIDE (dlls)

-client_message.h & .cpp - Any message ID varaibles and message linkup for sending messages to the client have been moved here. They used to be stored mainly, if not fully, in player.cpp. Stored separately for neatness and accessibility.

-The CBaseToggle, CBaseButton and CBaseAnimating classes have been moved to their own files named basetoggle.h, basebutton.h and animating.h accordingly.
 Other files including cbase.h must now include those files to see these classes.

-CBaseDoor moved from doors.cpp to doors.h (which already existed interestingly enough, without any class)

-CBaseTurret and its subclasses, CTurret, CMiniTurret and CSentry, have all been moved to turret.h to separate classes from implementation.

-CBarnacle moved to its own .h file, barnacle.h. Similar move.

-util_debugdraw.h & .cpp - central place for methods related to drawing visual debug lines on demand, to be rendered in client.cpp every so many frames so that the most recently set line coords can be seen.

-plats.h - various classes from plats.cpp moved here.

-trains.h existed before, but also has (a) new class(es) moved there.

-bloater.cpp has been replaced with floater.h and floater.cpp. More fitting to the final name.

-Classes of healthkit.cpp moved to new file healthkit.h.

-The two ball (projectile, one dumb and one smart) classes from controller.cpp have been made into their own .h / .cpp files and added to the dll build:
 class CControllerZapBall -> controller_zap_ball.h & .cpp
 class CControllerHeadBall -> controller_head_ball.h & .cpp

-Bullsquid projectile (CSquidSpit) moved from bullsquid.cpp to its own files too: squidspit.h / .cpp.

-healthmodule.h & .cpp - for storing info about how a CWallHealth maintains healing information such as charge left.
                         Include an instance of HealthModule with proper setup to get that same functionality in different places.

-lights.h - stores classes from lights.cpp for including elsewhere.

-hornet_kingpin.h & .cpp - stores CHornetKingpin, child class of CHornet. The kingpin's "Speed Missile" projectile with particular behavior.

-animation.h/.cpp renamed to util_model.h/.cpp to avoid confusion with animating.h/.cpp (defines the CBaseAnimating class).

-squeakgrenade.h/.cpp renamed to squeak.h/.cpp, more like the weapon.  What, I'm obsessive.

-entity/gib.h/.cpp - gib classes and implementations moved from other files to here for neatness.

-barney.h, scientist.h.  It's about time.

-monstersavestate.h, monstersavestate.cpp - moved outside barney.cpp

-singleplay_gamerules.cpp, multiplay_gamerules.cpp, teamplay_gamerules.h/.cpp renamed to have 'gamerules' in front.

-player_extra.h/.cpp - Several classes defined & implemented in player.cpp moved to these files.




SHARED (game_shared)
-files stored in a new 'util' subfolder for neatness, keep this in mind for new visual studio environments. Add this game_shared/NEW as a search path.

-util/cvar_custom.h (no .cpp) - stores script related to the hidden CVar system, including basic macros for working with CVars (EASY_CVAR_GET, EASY_CVAR_EXTERN, etc.), and lists for declaring CVars.
 New CVars must be added to various lists around the latter half for complete additions. The "_DEBUGONLY" macros make them hidden in release builds (skip engine registration to avoid showup up in autocomplete), but they can still be accessed with placement in the EASY_CVAR_HIDDEN_LIST list (2nd argument must be the same as the 1st but lowercase). Users can still see/set a CVar if they type the name in correctly, case insensitive.
 Inclusion in the  EASY_CVAR_CLIENTSENDOFF_LIST_CLIENT list and coordinating their unique IDs with _CLIENTSENDOFF macros across some other large lists will send this CVar to the client properly, but is only necessary for CVars that need to be reproduced clientside, such as things that affect viewmodels or GUI.
 Hidden CVars are not saved by default since they are not even part of the typical CVar system in the engine. To save them, they must be included in EASY_CVAR_HIDDENSAVE_MASS and EASY_CVAR_HIDDENLOAD_MASS. EASY_CVAR_HIDDENLOAD requires a 2nd copy of the Cvar in lowercase.
~Note that the hidden CVar system is not used in Debug builds - all CVars are visible in autocomplete and properly updated in the client. Hidden CVars not accessible by the EASY_CVAR_HIDDEN_LIST are permanently unchangable by the user in release unless they are saved / loaded in the absZeroMem.txt file where they may be edited. CVars are only changed serverside by default and must be sent clientside by EASY_CVAR_CLIENTSENDOFF_LIST_CLIENT for changes to take effect clientside (some other lists must also use _CLIENTSENDOFF versions and corresponding IDs).
~ALSO, when a CVar is declared _DEBUGONLY (hidden), it can still be accessed through EASY_CVAR_GET either way (there is no EASY_CVAR_GET_DEBUGONLY), but must be set using EASY_CVAR_SET_DEBUGONLY. Otherwise, release builds will look for a CVar in the engine that doesn't exist (hidden system avoids this registration, sets it elsewhere). Not that CVars need to be set by the game very often, let alone hidden ones.

util/util_entity.h & .cpp - Stores some essential constants and methods needed throughout virtually all of serverside script, such as entity manipulations (edict, entvars, CBaseEntity). This makes the bare minimum available without having to include util.h. Some methods that used to be inline have been implemented in util_entity.cpp so that enginecallback.h can store all direct engine calls, including a few that used to be in util.h, for consistency. That is, enginecallback.h and some starting util.h script (moved to util_entity) depends on each other, so some important engine calls were available only from including util.h that should've been available everywhere.

util/util_printout.h & .cpp - sevral printout methods mostly from Clientside and Serverside util.cpp files have been moved here for convenience. Some portions still separated by client or serverside with CLIENT_DLL defined checks. Regardless, basic printout methods like easyPrintLine, easyForcePrintLine, and UTIL_printLineVector (requires enableModPrintouts to be 1) should be made available to either side. They have few other dependencies and should be able to be included anywhere for printing to console.

util/util_shared.h & .cpp - some other methods / constants throughout Clientside and Serverside util.cpp files have been moved here for convenience. Tons of serverside util.cpp methods could be moved here (no / negligible reliance on server-specific features), but it has not yet been necessary to do so. The checkSubFileExistence and dependencies, for intance, have been moved here because the client must independently check for the presence of the "helpme.txt" file to remove its dependence on server-client CVar transmission for a proper hiddenMemPrintout value. Other script needed by client & serverside can go here to remove the redundancy of otherwise duplicate or near-duplicate code.

common/vector.h (no .cpp) - combined contents of clentside's util_vector.h and serverside's vector.h to remove redundancy as not much changed between the two versions. Several new methods for working with Vectors have been imported.
Also moved to the 'common' folder as it is independent of any particular game completely (like common/const.h, which includes this).

PM_SHARED
-pm_printout.h & .c - mirrors util_printout.h/.cpp for C++, but compatible with C for pm_shared.c (and other .c files) to be able to use.


