



// This used to be in const.h. It now includes this file to keep custom CVars available everywhere.




/*
A few important notes:

Still need to extern CVars meant to be received by the client in cl_dlls/ammo.cpp (may change what file gets this role at some point).
Also, need to extern (all?) CVars in dlls/client.cpp.

*/











#ifndef CVAR_CUSTOM_H
#define CVAR_CUSTOM_H




//CREDIT TO TEAM:
//http://stackoverflow.com/questions/6671698/adding-quotes-to-argument-in-c-preprocessor
#define QQQQ(x) #x
#define QUOTE(x) QQQQ(x)



//*************************************************************************************************
//*************************************************************************************************
//*************************************************************************************************
//MODDD - NOTE - this space is visible to both the client and server side files.
//*************************************************************************************************
//*************************************************************************************************
//*************************************************************************************************

/*
#include "../debugSetting.h"
#if debugOn == 1
//In vs6, this doesn't seem to get autogenerated when we need it.  ???
#define _DEBUG 1
#define DEBUG 1
#endif
*/


//#ifndef GLOBALSTUFF
//#define GLOBALSTUFF

#define EASY_CVAR_DECLARATION_CLIENT(CVarName)\
	DUMMY


#define EASY_CVAR_DECLARATION_SERVER(CVarName)\
	DUMMY


// Is starting out at defaults ok?  Was -1.
#define EASY_CVAR_DECLARATION_CLIENT_CLIENTSENDOFF_BROADCAST(CVarName)\
	float global2_##CVarName = DEFAULT_##CVarName;

// May already have access to the CVar serverside, but need to keep track of when it is changed.
#define EASY_CVAR_DECLARATION_SERVER_CLIENTSENDOFF_BROADCAST(CVarName)\
	float global_##CVarName = DEFAULT_##CVarName;


// no cache needed then.  Always a CVar.
#define EASY_CVAR_DECLARATION_CLIENT_CLIENTONLY(CVarName)\
	DUMMY



//??
#ifdef CLIENT_DLL

#else
//SERVER

#endif




#define EASY_CVAR_DECLARATION_SERVER_CLIENTONLY(CVarName)\
	DUMMY



#ifdef _DEBUG

	#define EASY_CVAR_DECLARATION_SERVER_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
		float global_##CVarName = DEFAULT_##CVarName;
	#define EASY_CVAR_DECLARATION_SERVER_CLIENTONLY_DEBUGONLY(CVarName)\
		DUMMY
	#define EASY_CVAR_DECLARATION_CLIENT_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
		float global2_##CVarName = DEFAULT_##CVarName;

	#define EASY_CVAR_DECLARATION_CLIENT_CLIENTONLY_DEBUGONLY(CVarName)\
		DUMMY


#else
//RELEASE
	#define EASY_CVAR_DECLARATION_SERVER_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
		float global_##CVarName = DEFAULT_##CVarName;
// clientonly? not on the server at all.
	#define EASY_CVAR_DECLARATION_SERVER_CLIENTONLY_DEBUGONLY(CVarName)\
		DUMMY
// Still no need to store anything serverside, I think.
// Yea, not possible because there's one server and possibly several clients.
// Doesn't make sense to store anything serverside for this.
	#define EASY_CVAR_DECLARATION_CLIENT_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
		float global2_##CVarName = DEFAULT_##CVarName;
// need to be cached to get past autocomplete.
	#define EASY_CVAR_DECLARATION_CLIENT_CLIENTONLY_DEBUGONLY(CVarName)\
		float global2_##CVarName = DEFAULT_##CVarName;


#endif










#define CALL_EASY_CVAR_SYNCH_SERVER_TO_CLIENT_BROADCAST(CVarName)\
	MESSAGE_BEGIN(MSG_ALL, gmsgUpdateClientCVarNoSave, NULL); \
		WRITE_SHORT(CVarName##_ID); \
		WRITE_SHORT( EASY_CVAR_GET(CVarName)*100);\
	MESSAGE_END();



#ifndef CLIENT_DLL
	// server
#ifdef _DEBUG
#define CALL_EASY_CVAR_SYNCH_SERVER_TO_CLIENT_BROADCAST_DEBUGONLY(CVarName)\
			MESSAGE_BEGIN(MSG_ALL, gmsgUpdateClientCVarNoSave, NULL); \
				WRITE_SHORT(CVarName##_ID); \
				WRITE_SHORT( EASY_CVAR_GET(CVarName)*100);\
			MESSAGE_END();
#else
	//release
#define CALL_EASY_CVAR_SYNCH_SERVER_TO_CLIENT_BROADCAST_DEBUGONLY(CVarName)\
			MESSAGE_BEGIN(MSG_ALL, gmsgUpdateClientCVarNoSave, NULL); \
				WRITE_SHORT(CVarName##_ID); \
				WRITE_SHORT( global_##CVarName*100);\
			MESSAGE_END();
#endif
#endif



/*
#define EASY_CVAR_SYNCH_SERVER_TO_CLIENT(arg_cvar, arg_ent_pev)\
	CALL_EASY_CVAR_SYNCH_SERVER_TO_CLIENT(arg_cvar, arg_ent_pev)

// same?
#define EASY_CVAR_SYNCH_SERVER_TO_CLIENT_DEBUGONLY(arg_cvar, arg_ent_pev)\
	CALL_EASY_CVAR_SYNCH_SERVER_TO_CLIENT_DEBUGONLY(arg_cvar, arg_ent_pev)
*/



#define CALL_EASY_CVAR_SYNCH_SERVER_TO_CLIENT(arg_cvar, arg_ent_pev)\
	MESSAGE_BEGIN(MSG_ONE, gmsgUpdateClientCVar, NULL, arg_ent_pev);\
		WRITE_SHORT(arg_cvar##_ID);\
		WRITE_SHORT(EASY_CVAR_GET(arg_cvar) * 100);\
	MESSAGE_END();

#define CALL_EASY_CVAR_SYNCH_SERVER_TO_CLIENT_DEBUGONLY(arg_cvar, arg_ent_pev)\
	MESSAGE_BEGIN(MSG_ONE, gmsgUpdateClientCVar, NULL, arg_ent_pev);\
		WRITE_SHORT(arg_cvar##_ID);\
		WRITE_SHORT(global_##arg_cvar * 100);\
	MESSAGE_END();



// !!! NOSAVE variants
#define CALL_EASY_CVAR_SYNCH_NOSAVE_SERVER_TO_CLIENT(arg_cvar, arg_ent_pev)\
	MESSAGE_BEGIN(MSG_ONE, gmsgUpdateClientCVarNoSave, NULL, arg_ent_pev);\
		WRITE_SHORT(arg_cvar##_ID);\
		WRITE_SHORT(EASY_CVAR_GET(arg_cvar) * 100);\
	MESSAGE_END();

#define CALL_EASY_CVAR_SYNCH_NOSAVE_SERVER_TO_CLIENT_DEBUGONLY(arg_cvar, arg_ent_pev)\
	MESSAGE_BEGIN(MSG_ONE, gmsgUpdateClientCVarNoSave, NULL, arg_ent_pev);\
		WRITE_SHORT(arg_cvar##_ID);\
		WRITE_SHORT(global_##arg_cvar * 100);\
	MESSAGE_END();





#define EASY_CVAR_SYNCH_SERVER_CLIENTSENDOFF_BROADCAST(arg_cvar)\
	CALL_EASY_CVAR_SYNCH_SERVER_TO_CLIENT(arg_cvar, pev)

#define EASY_CVAR_SYNCH_SERVER_CLIENTSENDOFF_BROADCAST_DEBUGONLY(arg_cvar)\
	CALL_EASY_CVAR_SYNCH_SERVER_TO_CLIENT_DEBUGONLY(arg_cvar, pev)

// dummy the rest
#define EASY_CVAR_SYNCH_SERVER(arg_cvar)
#define EASY_CVAR_SYNCH_SERVER_CLIENTONLY(arg_cvar)
#define EASY_CVAR_SYNCH_SERVER_DEBUGONLY(arg_cvar)
#define EASY_CVAR_SYNCH_SERVER_CLIENTONLY_DEBUGONLY(arg_cvar)





#define EASY_CVAR_SYNCH_NOSAVE_SERVER_CLIENTSENDOFF_BROADCAST(arg_cvar)\
	CALL_EASY_CVAR_SYNCH_NOSAVE_SERVER_TO_CLIENT(arg_cvar, pev)

#define EASY_CVAR_SYNCH_NOSAVE_SERVER_CLIENTSENDOFF_BROADCAST_DEBUGONLY(arg_cvar)\
	CALL_EASY_CVAR_SYNCH_NOSAVE_SERVER_TO_CLIENT_DEBUGONLY(arg_cvar, pev)

// dummy the rest
#define EASY_CVAR_SYNCH_NOSAVE_SERVER(arg_cvar)
#define EASY_CVAR_SYNCH_NOSAVE_SERVER_CLIENTONLY(arg_cvar)
#define EASY_CVAR_SYNCH_NOSAVE_SERVER_DEBUGONLY(arg_cvar)
#define EASY_CVAR_SYNCH_NOSAVE_SERVER_CLIENTONLY_DEBUGONLY(arg_cvar)








//easyForcePrintLine("TEST1a: %s %.2f", #arg_NAME, argVal);
//g_engfuncs.pfnClientCommand(pEntity, #arg_NAME" %g", argVal);

// always this way
#define CUSTOM_CLIENT_CALL_NAME(arg_NAME, argVal)\
		MESSAGE_BEGIN( MSG_ONE, gmsgJukeboxRequest, NULL, pev );\
			WRITE_STRING(UTIL_VarArgs(#arg_NAME" %g", (float)argVal ) );\
		MESSAGE_END();

#define CUSTOM_CLIENT_CALL_NAME_FORCEBROADCAST(arg_NAME, argVal)\
		MESSAGE_BEGIN( MSG_ALL, gmsgJukeboxRequest, NULL );\
			WRITE_STRING(UTIL_VarArgs(#arg_NAME" %g", (float)argVal ) );\
		MESSAGE_END();

		//g_engfuncs.pfnClientCommand(pEntity, #arg_NAME" %.3f", argVal);

// SERVER ONLY, ANY CUSTOM_CLIENT_CALL !!!
#ifdef _DEBUG
	#define CUSTOM_CLIENT_CALL_NAME_DEBUGONLY(arg_NAME, argVal)\
		MESSAGE_BEGIN( MSG_ONE, gmsgJukeboxRequest, NULL, pev );\
			WRITE_STRING(UTIL_VarArgs(#arg_NAME" %g", (float)argVal ) );\
		MESSAGE_END();

	#define CUSTOM_CLIENT_CALL_NAME_DEBUGONLY_FORCEBROADCAST(arg_NAME, argVal)\
		MESSAGE_BEGIN( MSG_ALL, gmsgJukeboxRequest, NULL );\
			WRITE_STRING(UTIL_VarArgs(#arg_NAME" %g", (float)argVal ) );\
		MESSAGE_END();

#else
	//RELEASE
	#define CUSTOM_CLIENT_CALL_NAME_DEBUGONLY(arg_NAME, argVal)\
		MESSAGE_BEGIN( MSG_ONE, gmsgUpdateClientCVar, NULL, pev );\
			WRITE_SHORT( arg_NAME##_ID);\
			WRITE_SHORT( argVal*100);\
		MESSAGE_END();
	
	#define CUSTOM_CLIENT_CALL_NAME_DEBUGONLY_FORCEBROADCAST(arg_NAME, argVal)\
		MESSAGE_BEGIN( MSG_ALL, gmsgUpdateClientCVarNoSave, NULL );\
			WRITE_SHORT( arg_NAME##_ID);\
			WRITE_SHORT( argVal*100);\
		MESSAGE_END();
#endif


// RELEASE MODE ONLY!
#define CUSTOM_CLIENT_CALL(ID, argVal)\
	MESSAGE_BEGIN( MSG_ONE, gmsgUpdateClientCVar, NULL, pev );\
		WRITE_SHORT( ID);\
		WRITE_SHORT( argVal*100);\
	MESSAGE_END();















#ifndef CLIENT_DLL
	//server.
#define EASY_CVAR_GET(CVarName)\
	CVAR_GET_FLOAT( #CVarName )

// whut
//#define EASY_CVAR_GET_CLIENTONLY(CVarName)\
//	DUMMY

#else
	//client.
#define EASY_CVAR_GET(CVarName)\
	CVAR_GET_FLOAT( #CVarName )

#define EASY_CVAR_GET_CLIENTONLY(CVarName)\
	CVAR_GET_FLOAT( #CVarName )
#endif




#ifdef CLIENT_DLL
	// client? Get it through the cached var (updated as the real server CVar is changed)
#define EASY_CVAR_GET_CLIENTSENDOFF_BROADCAST(CVarName)\
		global2_##CVarName
#else
	// server? Just get it the ordinary way, since we have it onboard.
#define EASY_CVAR_GET_CLIENTSENDOFF_BROADCAST(CVarName)\
		EASY_CVAR_GET(CVarName)
#endif




// NEW!  Get plain DEBUGONLY CVars through the global_/global2_ constants only!


/*
#define EASY_CVAR_EXTERN_DEBUGONLY(CVarName)\
			extern float global_##CVarName;
#define EASY_CVAR_EXTERN_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
			extern float global_##CVarName;
#define EASY_CVAR_EXTERN_CLIENTONLY_DEBUGONLY(CVarName)\
			DUMMY
*/





#define EASY_CVAR_SET(CVarName, valueV)\
	CVAR_SET_FLOAT(#CVarName, valueV);

#define EASY_CVAR_RESET(CVarName)\
	CVAR_SET_FLOAT(#CVarName, DEFAULT_##CVarName);


#ifndef CLIENT_DLL
//SERVER
#define EASY_CVAR_RESET_CLIENTSENDOFF_BROADCAST(CVarName)\
	CVAR_SET_FLOAT(#CVarName, DEFAULT_##CVarName);
#else
//CLIENT
#define EASY_CVAR_RESET_CLIENTSENDOFF_BROADCAST(CVarName)\
	global2_##CVarName = EASY_CVAR_GET(CVarName);
#endif


#ifndef CLIENT_DLL
	// SERVER


	#define EASY_CVAR_SET_CLIENTONLY(CVarName, valueV)\
		CUSTOM_CLIENT_CALL_NAME(CVarName, valueV)

	#ifdef _DEBUG
		#define EASY_CVAR_GET_DEBUGONLY(CVarName)\
			CVAR_GET_FLOAT( #CVarName )

		#define EASY_CVAR_GET_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
			EASY_CVAR_GET(CVarName)

		// is that okay?  Implied only for the server (global_...).
		#define EASY_CVAR_SET_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName, valueV)\
			CVAR_SET_FLOAT(#CVarName, valueV);

		// send a call to change it for one client?
		#define EASY_CVAR_SET_CLIENTONLY_DEBUGONLY(CVarName, valueV)\
			CUSTOM_CLIENT_CALL_NAME_DEBUGONLY(CVarName, valueV)
		#define EASY_CVAR_SET_CLIENTONLY_DEBUGONLY_FORCEBROADCAST(CVarName, valueV)\
			CUSTOM_CLIENT_CALL_NAME_DEBUGONLY_FORCEBROADCAST(CVarName, valueV)

	#else
		//release
		#define EASY_CVAR_GET_DEBUGONLY(CVarName)\
			(IS_DEDICATED_SERVER()?CVAR_GET_FLOAT(#CVarName):global_##CVarName)

		#define EASY_CVAR_GET_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
			(IS_DEDICATED_SERVER()?CVAR_GET_FLOAT(#CVarName):global_##CVarName)


		// is that okay?  Implied only for the server (global_...).
		#define EASY_CVAR_SET_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName, valueV)\
			if(IS_DEDICATED_SERVER()){\
				CVAR_SET_FLOAT(#CVarName, valueV);\
			}\
			global_##CVarName = valueV;\
			CALL_EASY_CVAR_SYNCH_SERVER_TO_CLIENT_BROADCAST_DEBUGONLY(CVarName)

		// send a call to change it for one client?
		#define EASY_CVAR_SET_CLIENTONLY_DEBUGONLY(CVarName, valueV)\
			CUSTOM_CLIENT_CALL_NAME_DEBUGONLY(CVarName, valueV)
		#define EASY_CVAR_SET_CLIENTONLY_DEBUGONLY_FORCEBROADCAST(CVarName, valueV)\
			CUSTOM_CLIENT_CALL_NAME_DEBUGONLY_FORCEBROADCAST(CVarName, valueV)

	#endif
#else
	// CLIENT


	#define EASY_CVAR_SET_CLIENTONLY(CVarName, valueV)\
			CVAR_SET_FLOAT(#CVarName, valueV);

	#ifdef _DEBUG
		#define EASY_CVAR_GET_DEBUGONLY(CVarName)\
			CVAR_GET_FLOAT( #CVarName )

		#define EASY_CVAR_GET_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
			global2_##CVarName
		// CLIENTONLY? DEBUGONLY?  Still a CVAR in debug.
		#define EASY_CVAR_GET_CLIENTONLY_DEBUGONLY(CVarName)\
			EASY_CVAR_GET(CVarName)
		
		#define EASY_CVAR_SET_CLIENTONLY_DEBUGONLY(CVarName, valueV)\
			CVAR_SET_FLOAT(#CVarName, valueV);
	#else
		//release
		#define EASY_CVAR_GET_DEBUGONLY(CVarName)\
			global2_##CVarName

		#define EASY_CVAR_GET_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
			global2_##CVarName
		// CLIENTONLY? DEBUGONLY?  Now a var
		#define EASY_CVAR_GET_CLIENTONLY_DEBUGONLY(CVarName)\
			global2_##CVarName


		#define EASY_CVAR_SET_CLIENTONLY_DEBUGONLY(CVarName, valueV)\
			global2_##CVarName = valueV;
	#endif
#endif







#ifndef CLIENT_DLL
	// SERVER

	#define EASY_CVAR_RESET_CLIENTONLY(CVarName)\
			CUSTOM_CLIENT_CALL_NAME(CVarName, DEFAULT_##CVarName)


	#ifdef _DEBUG

		#define EASY_CVAR_SET_DEBUGONLY(CVarName, valueV)\
			CVAR_SET_FLOAT(#CVarName, valueV);
		#define EASY_CVAR_RESET_DEBUGONLY(CVarName)\
			CVAR_SET_FLOAT(#CVarName, DEFAULT_##CVarName);

		#define EASY_CVAR_RESET_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
			CVAR_SET_FLOAT(#CVarName, DEFAULT_##CVarName);

		// No need, the call to clientside will handle this on its own.
		#define EASY_CVAR_RESET_CLIENTONLY_DEBUGONLY(CVarName) DUMMY
		//	CUSTOM_CLIENT_CALL_NAME_DEBUGONLY(CVarName, DEFAULT_##CVarName)
	#else
		#define EASY_CVAR_SET_DEBUGONLY(CVarName, valueV)\
			if(IS_DEDICATED_SERVER()){\
				CVAR_SET_FLOAT(#CVarName, valueV);\
			}else{\
				global_##CVarName = valueV;\
			}
		#define EASY_CVAR_RESET_DEBUGONLY(CVarName)\
			if(IS_DEDICATED_SERVER()){\
				CVAR_SET_FLOAT(#CVarName, DEFAULT_##CVarName);\
			}else{\
				global_##CVarName = DEFAULT_##CVarName;\
			}

		#define EASY_CVAR_RESET_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
			if(IS_DEDICATED_SERVER()){\
				CVAR_SET_FLOAT(#CVarName, DEFAULT_##CVarName);\
			}\
			global_##CVarName = DEFAULT_##CVarName;\
			CALL_EASY_CVAR_SYNCH_SERVER_TO_CLIENT_BROADCAST_DEBUGONLY(CVarName)

			
		#define EASY_CVAR_RESET_CLIENTONLY_DEBUGONLY(CVarName) DUMMY
		//	CUSTOM_CLIENT_CALL_NAME_DEBUGONLY(CVarName, DEFAULT_##CVarName)

	#endif
		// Should this also force a message to the clients?
		// Probably not, should already be handled soon by logic watching
		// for CVar changes anyway.
		
#else
	// CLIENT

	#define EASY_CVAR_RESET_CLIENTONLY(CVarName)\
			CVAR_SET_FLOAT(#CVarName, DEFAULT_##CVarName);


		// no need, will be reset by broadcasts soon enough either way.
	#ifdef _DEBUG

			#define EASY_CVAR_SET_DEBUGONLY(CVarName, valueV)\
				CVAR_SET_FLOAT(#CVarName, valueV);
			#define EASY_CVAR_RESET_DEBUGONLY(CVarName)\
				CVAR_SET_FLOAT(#CVarName, DEFAULT_##CVarName);

			#define EASY_CVAR_RESET_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
				DUMMY
			#define EASY_CVAR_RESET_CLIENTONLY_DEBUGONLY(CVarName)\
				CVAR_SET_FLOAT(#CVarName, DEFAULT_##CVarName);
	#else
			#define EASY_CVAR_SET_DEBUGONLY(CVarName, valueV)\
				global2_##CVarName = valueV;
			#define EASY_CVAR_RESET_DEBUGONLY(CVarName)\
				global2_##CVarName = DEFAULT_##CVarName;

			#define EASY_CVAR_RESET_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
				DUMMY
			#define EASY_CVAR_RESET_CLIENTONLY_DEBUGONLY(CVarName)\
				global2_##CVarName = DEFAULT_##CVarName;

	#endif



#endif
	





	

/*
#ifndef CLIENT_DLL
	//server.
	#define EASY_CVAR_GET(CVarName)\
	global_##CVarName

	#define EASY_CVAR_EXTERN(CVarName)\
	extern float global_##CVarName;

	#define EASY_CVAR_EXTERN_CLIENTONLY(CVarName)
	#define EASY_CVAR_EXTERN_SERVERONLY(CVarName) EASY_CVAR_EXTERN(CVarName)

#else
	//client.
	#define EASY_CVAR_GET(CVarName)\
	global2_##CVarName

	#define EASY_CVAR_EXTERN(CVarName)\
	extern float global2_##CVarName;

	#define EASY_CVAR_EXTERN_CLIENTONLY(CVarName) EASY_CVAR_EXTERN(CVarName)
	#define EASY_CVAR_EXTERN_SERVERONLY(CVarName)

#endif
	*/















#define EASY_CVAR_UPDATE_CLIENT(CVarName)\
	DUMMY
#define EASY_CVAR_UPDATE_SERVER(CVarName)\
	DUMMY
#define EASY_CVAR_UPDATE_SERVER_DEDICATED(CVarName)\
	DUMMY


#define EASY_CVAR_UPDATE_CLIENT_CLIENTONLY(CVarName)\
	DUMMY
#define EASY_CVAR_UPDATE_SERVER_CLIENTONLY(CVarName)\
	DUMMY
#define EASY_CVAR_UPDATE_SERVER_DEDICATED_CLIENTONLY(CVarName)\
	DUMMY



#define EASY_CVAR_UPDATE_CLIENT_CLIENTSENDOFF_BROADCAST(CVarName)\
	DUMMY


//Identical to non-clientsendoff.
#define EASY_CVAR_UPDATE_CLIENT_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
	DUMMY
#define EASY_CVAR_UPDATE_CLIENT_CLIENTONLY_DEBUGONLY(CVarName)\
	DUMMY





#define CALL_EASY_CVAR_UPDATE_SERVER_CLIENTSENDOFF_BROADCAST(CVarName)\
	if(EASY_CVAR_GET(CVarName) != global_##CVarName){\
		global_##CVarName = EASY_CVAR_GET(CVarName);\
		CALL_EASY_CVAR_SYNCH_SERVER_TO_CLIENT_BROADCAST(CVarName)\
	}

// Nope, redundant with the debug/release independent form.
#define CALL_EASY_CVAR_UPDATE_SERVER_DEDICATED_CLIENTSENDOFF_BROADCAST(CVarName)\
	DUMMY




#ifdef _DEBUG

	#define EASY_CVAR_UPDATE_SERVER_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
		CALL_EASY_CVAR_UPDATE_SERVER_CLIENTSENDOFF_BROADCAST(CVarName)
	#define EASY_CVAR_UPDATE_SERVER_DEDICATED_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
		DUMMY

	#define EASY_CVAR_UPDATE_SERVER_CLIENTONLY_DEBUGONLY(CVarName)\
		DUMMY
	#define EASY_CVAR_UPDATE_SERVER_DEDICATED_CLIENTONLY_DEBUGONLY(CVarName)\
		DUMMY
	//no CVAR creation redos.

#else

	#define EASY_CVAR_UPDATE_SERVER_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
		DUMMY

	// Dedicated?  Now you need to happen.
	#define EASY_CVAR_UPDATE_SERVER_DEDICATED_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
		CALL_EASY_CVAR_UPDATE_SERVER_CLIENTSENDOFF_BROADCAST(CVarName)

	#define EASY_CVAR_UPDATE_SERVER_CLIENTONLY_DEBUGONLY(CVarName)\
		DUMMY
	#define EASY_CVAR_UPDATE_SERVER_DEDICATED_CLIENTONLY_DEBUGONLY(CVarName)\
		DUMMY


#endif



// Do checks.  Has our CVar changed?  We need to tell the client.
#define EASY_CVAR_UPDATE_SERVER_CLIENTSENDOFF_BROADCAST(CVarName)\
	CALL_EASY_CVAR_UPDATE_SERVER_CLIENTSENDOFF_BROADCAST(CVarName)


#define EASY_CVAR_UPDATE_SERVER_DEDICATED_CLIENTSENDOFF_BROADCAST(CVarName)\
	CALL_EASY_CVAR_UPDATE_SERVER_CLIENTSENDOFF_BROADCAST(CVarName)

//#define EASY_CVAR_CREATE_SERVER_SETUP_A_SERVERONLY(CVarName)\
//	DUMMY
//#define EASY_CVAR_CREATE_SERVER_A_SERVERONLY(CVarName)\
//	DUMMY
//#define EASY_CVAR_CREATE_CLIENT_A_SERVERONLY(CVarName)\
//	DUMMY



#define EASY_CVAR_EXTERN(CVarName)\
	DUMMY
#define EASY_CVAR_EXTERN_CLIENTONLY(CVarName)\
	DUMMY


#ifndef CLIENT_DLL
	// SERVER
	#define EASY_CVAR_EXTERN_CLIENTSENDOFF_BROADCAST(CVarName)\
		extern float global_##CVarName;

	#ifdef _DEBUG

		#define EASY_CVAR_DECLARATION_SERVER_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_DECLARATION_CLIENT_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_UPDATE_SERVER_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_UPDATE_SERVER_DEDICATED_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_UPDATE_CLIENT_DEBUGONLY(CVarName)\
			DUMMY

		#define EASY_CVAR_EXTERN_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_EXTERN_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
			extern float global_##CVarName;
		#define EASY_CVAR_EXTERN_CLIENTONLY_DEBUGONLY(CVarName)\
			DUMMY
		//client?  Refer to the cached variable
	#else
		//RELEASE

		#define EASY_CVAR_DECLARATION_SERVER_DEBUGONLY(CVarName)\
			float global_##CVarName = DEFAULT_##CVarName;
		#define EASY_CVAR_DECLARATION_CLIENT_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_UPDATE_SERVER_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_UPDATE_SERVER_DEDICATED_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_UPDATE_CLIENT_DEBUGONLY(CVarName)\
			DUMMY

		#define EASY_CVAR_EXTERN_DEBUGONLY(CVarName)\
			extern float global_##CVarName;
		#define EASY_CVAR_EXTERN_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
			extern float global_##CVarName;
		#define EASY_CVAR_EXTERN_CLIENTONLY_DEBUGONLY(CVarName)\
			DUMMY
	#endif
#else
	// CLIENT
	#define EASY_CVAR_EXTERN_CLIENTSENDOFF_BROADCAST(CVarName)\
		extern float global2_##CVarName;

	#ifdef _DEBUG

		#define EASY_CVAR_DECLARATION_SERVER_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_DECLARATION_CLIENT_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_UPDATE_SERVER_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_UPDATE_SERVER_DEDICATED_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_UPDATE_CLIENT_DEBUGONLY(CVarName)\
			DUMMY

		#define EASY_CVAR_EXTERN_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_EXTERN_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
			extern float global2_##CVarName;
		#define EASY_CVAR_EXTERN_CLIENTONLY_DEBUGONLY(CVarName)\
			DUMMY
	#else
		//RELEASE
		#define EASY_CVAR_DECLARATION_SERVER_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_DECLARATION_CLIENT_DEBUGONLY(CVarName)\
			float global2_##CVarName = DEFAULT_##CVarName;
		#define EASY_CVAR_UPDATE_SERVER_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_UPDATE_SERVER_DEDICATED_DEBUGONLY(CVarName)\
			DUMMY
		#define EASY_CVAR_UPDATE_CLIENT_DEBUGONLY(CVarName)\
			DUMMY

		#define EASY_CVAR_EXTERN_DEBUGONLY(CVarName)\
			extern float global2_##CVarName;
		#define EASY_CVAR_EXTERN_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName)\
			extern float global2_##CVarName;
		#define EASY_CVAR_EXTERN_CLIENTONLY_DEBUGONLY(CVarName)\
			extern float global2_##CVarName;
		
	#endif


#endif












//!!!!
#define CALL_EASY_CVAR_CREATE_CLIENT(CVarName, flags)\
	CVAR_CREATE(#CVarName, QUOTE(DEFAULT_##CVarName), flags);\
	//global2_##CVarName = DEFAULT_##CVarName;

/*
#define EASY_CVAR_CREATE_CLIENT(CVarName)\
	CALL_EASY_CVAR_CREATE_CLIENT(CVarName, 0);
#define EASY_CVAR_CREATE_CLIENT_A(CVarName)\
	CALL_EASY_CVAR_CREATE_CLIENT(CVarName, FCVAR_ARCHIVE);
*/

#define EASY_CVAR_CREATE_CLIENT_CLIENTONLY(CVarName)\
	CALL_EASY_CVAR_CREATE_CLIENT(CVarName, 0);
#define EASY_CVAR_CREATE_CLIENT_A_CLIENTONLY(CVarName)\
	CALL_EASY_CVAR_CREATE_CLIENT(CVarName, FCVAR_ARCHIVE);




#ifdef _DEBUG
	#define CALL_EASY_CVAR_CREATE_CLIENT_DEBUGONLY(CVarName, flags)\
		CALL_EASY_CVAR_CREATE_CLIENT(CVarName, flags)
#define EASY_CVAR_CREATE_CLIENT_CLIENTONLY_DEBUGONLY(CVarName)\
		CALL_EASY_CVAR_CREATE_CLIENT(CVarName, 0);
#define EASY_CVAR_CREATE_CLIENT_A_CLIENTONLY_DEBUGONLY(CVarName)\
		CALL_EASY_CVAR_CREATE_CLIENT(CVarName, FCVAR_ARCHIVE);

#else
//RELEASE
#define CALL_EASY_CVAR_CREATE_CLIENT_DEBUGONLY(CVarName, flags)\
		DUMMY
#define EASY_CVAR_CREATE_CLIENT_CLIENTONLY_DEBUGONLY(CVarName)\
		DUMMY
#define EASY_CVAR_CREATE_CLIENT_A_CLIENTONLY_DEBUGONLY(CVarName)\
		DUMMY


#endif



// NOTICE - it may seem strange for 'SERVERONLY' vars to get registered clientside, but this looks to be exactly
// what retail does for several built-in variables.  sv_cheats is serverside, yet it can be set before a game begins.
// This is likely how (FCVAR_SERVER flag given manually).
// Dedicated servers need to register these anyway in dlls/game.cpp since they skip the client dll.
#define EASY_CVAR_CREATE_CLIENT_SERVERONLY(CVarName)\
	CALL_EASY_CVAR_CREATE_CLIENT(CVarName, FCVAR_SERVER);
#define EASY_CVAR_CREATE_CLIENT_A_SERVERONLY(CVarName)\
	CALL_EASY_CVAR_CREATE_CLIENT(CVarName, FCVAR_ARCHIVE | FCVAR_SERVER);


#ifdef _DEBUG
#define EASY_CVAR_CREATE_CLIENT_SERVERONLY_DEBUGONLY(CVarName)\
	CALL_EASY_CVAR_CREATE_CLIENT(CVarName, FCVAR_SERVER);
#define EASY_CVAR_CREATE_CLIENT_A_SERVERONLY_DEBUGONLY(CVarName)\
	CALL_EASY_CVAR_CREATE_CLIENT(CVarName, FCVAR_ARCHIVE | FCVAR_SERVER);
#else
//RELEASE
#define EASY_CVAR_CREATE_CLIENT_SERVERONLY_DEBUGONLY(CVarName)\
		DUMMY
#define EASY_CVAR_CREATE_CLIENT_A_SERVERONLY_DEBUGONLY(CVarName)\
		DUMMY
#endif








//QUOTE(DEFAULT_##CVarName);
#define CALL_EASY_CVAR_CREATE_SERVER(CVarName, argFlags)\
	CVAR_REGISTER(&globalcvar_##CVarName);\
	DUMMY

#define CALL_EASY_CVAR_CREATE_SERVER_SETUP(CVarName, argFlags)\
	cvar_t globalcvar_##CVarName = {#CVarName, QUOTE(DEFAULT_##CVarName), argFlags};


#define EASY_CVAR_CREATE_SERVER_CLIENTONLY(CVarName)\
	DUMMY
#define EASY_CVAR_CREATE_SERVER_A_CLIENTONLY(CVarName)\
	DUMMY

#define EASY_CVAR_CREATE_SERVER_SERVERONLY(CVarName)\
	CALL_EASY_CVAR_CREATE_SERVER(CVarName, 0);
#define EASY_CVAR_CREATE_SERVER_A_SERVERONLY(CVarName)\
	CALL_EASY_CVAR_CREATE_SERVER(CVarName, FCVAR_ARCHIVE);




#define EASY_CVAR_CREATE_SERVER_SETUP_CLIENTONLY(CVarName)\
		DUMMY
#define EASY_CVAR_CREATE_SERVER_SETUP_A_CLIENTONLY(CVarName)\
		DUMMY
#define EASY_CVAR_CREATE_SERVER_SETUP_SERVERONLY(CVarName)\
		CALL_EASY_CVAR_CREATE_SERVER_SETUP(CVarName, 0);
#define EASY_CVAR_CREATE_SERVER_SETUP_A_SERVERONLY(CVarName)\
		CALL_EASY_CVAR_CREATE_SERVER_SETUP(CVarName, FCVAR_ARCHIVE);



#ifdef _DEBUG
	#define CALL_EASY_CVAR_CREATE_SERVER_DEBUGONLY(CVarName, argFlags)\
			CALL_EASY_CVAR_CREATE_SERVER(CVarName, argFlags)
	#define EASY_CVAR_CREATE_SERVER_CLIENTONLY_DEBUGONLY(CVarName)\
			DUMMY
	#define EASY_CVAR_CREATE_SERVER_A_CLIENTONLY_DEBUGONLY(CVarName)\
			DUMMY
	#define EASY_CVAR_CREATE_SERVER_SERVERONLY_DEBUGONLY(CVarName)\
			CALL_EASY_CVAR_CREATE_SERVER_DEBUGONLY(CVarName, 0);
	#define EASY_CVAR_CREATE_SERVER_A_SERVERONLY_DEBUGONLY(CVarName)\
			CALL_EASY_CVAR_CREATE_SERVER_DEBUGONLY(CVarName, FCVAR_ARCHIVE);


	#define CALL_EASY_CVAR_CREATE_SERVER_SETUP_DEBUGONLY(CVarName, argFlags)\
			CALL_EASY_CVAR_CREATE_SERVER_SETUP(CVarName, argFlags)
	#define EASY_CVAR_CREATE_SERVER_SETUP_CLIENTONLY_DEBUGONLY(CVarName)\
			DUMMY
	#define EASY_CVAR_CREATE_SERVER_SETUP_A_CLIENTONLY_DEBUGONLY(CVarName)\
			DUMMY
	#define EASY_CVAR_CREATE_SERVER_SETUP_SERVERONLY_DEBUGONLY(CVarName)\
		CALL_EASY_CVAR_CREATE_SERVER_SETUP_DEBUGONLY(CVarName, 0);
	#define EASY_CVAR_CREATE_SERVER_SETUP_A_SERVERONLY_DEBUGONLY(CVarName)\
		CALL_EASY_CVAR_CREATE_SERVER_SETUP_DEBUGONLY(CVarName, FCVAR_ARCHIVE);


#else
//RELEASE

// Don't dummy it out, leave it as it is.
// This only gets called when using a dedicated server, which, with debug or release
// mode, has no way to set CVars through the hidden system.  So ditch it in such
// a case, work the same way.
// Keep this in mind for any other references.  FFFFFFffffffffuuuuuuuunnnnnnn.
/*
	#define CALL_EASY_CVAR_CREATE_SERVER_DEBUGONLY(CVarName, argFlags)\
		DUMMY
	#define EASY_CVAR_CREATE_SERVER_CLIENTONLY_DEBUGONLY(CVarName)\
		DUMMY
	#define EASY_CVAR_CREATE_SERVER_A_CLIENTONLY_DEBUGONLY(CVarName)\
		DUMMY
	#define EASY_CVAR_CREATE_SERVER_SERVERONLY_DEBUGONLY(CVarName)\
		DUMMY
	#define EASY_CVAR_CREATE_SERVER_A_SERVERONLY_DEBUGONLY(CVarName)\
		DUMMY


	#define CALL_EASY_CVAR_CREATE_SERVER_SETUP_DEBUGONLY(CVarName, argFlags)\
		DUMMY
	#define EASY_CVAR_CREATE_SERVER_SETUP_CLIENTONLY_DEBUGONLY(CVarName)\
		DUMMY
	#define EASY_CVAR_CREATE_SERVER_SETUP_A_CLIENTONLY_DEBUGONLY(CVarName)\
		DUMMY
	#define EASY_CVAR_CREATE_SERVER_SETUP_SERVERONLY_DEBUGONLY(CVarName)\
		DUMMY
	#define EASY_CVAR_CREATE_SERVER_SETUP_A_SERVERONLY_DEBUGONLY(CVarName)\
		DUMMY
*/

#define CALL_EASY_CVAR_CREATE_SERVER_DEBUGONLY(CVarName, argFlags)\
			CALL_EASY_CVAR_CREATE_SERVER(CVarName, argFlags)
#define EASY_CVAR_CREATE_SERVER_CLIENTONLY_DEBUGONLY(CVarName)\
			DUMMY
#define EASY_CVAR_CREATE_SERVER_A_CLIENTONLY_DEBUGONLY(CVarName)\
			DUMMY
#define EASY_CVAR_CREATE_SERVER_SERVERONLY_DEBUGONLY(CVarName)\
			CALL_EASY_CVAR_CREATE_SERVER_DEBUGONLY(CVarName, 0);
#define EASY_CVAR_CREATE_SERVER_A_SERVERONLY_DEBUGONLY(CVarName)\
			CALL_EASY_CVAR_CREATE_SERVER_DEBUGONLY(CVarName, FCVAR_ARCHIVE);


#define CALL_EASY_CVAR_CREATE_SERVER_SETUP_DEBUGONLY(CVarName, argFlags)\
			CALL_EASY_CVAR_CREATE_SERVER_SETUP(CVarName, argFlags)
#define EASY_CVAR_CREATE_SERVER_SETUP_CLIENTONLY_DEBUGONLY(CVarName)\
			DUMMY
#define EASY_CVAR_CREATE_SERVER_SETUP_A_CLIENTONLY_DEBUGONLY(CVarName)\
			DUMMY
#define EASY_CVAR_CREATE_SERVER_SETUP_SERVERONLY_DEBUGONLY(CVarName)\
		CALL_EASY_CVAR_CREATE_SERVER_SETUP_DEBUGONLY(CVarName, 0);
#define EASY_CVAR_CREATE_SERVER_SETUP_A_SERVERONLY_DEBUGONLY(CVarName)\
		CALL_EASY_CVAR_CREATE_SERVER_SETUP_DEBUGONLY(CVarName, FCVAR_ARCHIVE);


#endif







//MSG_ONE or MSG_ALL ???
// NOTE - if doing MSG_ALL, remove the 'pev'.  Game doesn't like MSG_ALL with a pev in mind. (4th parameter in MESSAGE_BEGIN)
#define EASY_CVAR_RESET_MASS_CLIENT_SIGNAL\
	MESSAGE_BEGIN( MSG_ALL, gmsgResetClientCVar, NULL );\
	MESSAGE_END();







#ifdef CLIENT_DLL

// Declare the hash stuff in debug mode too now!  Some CVars need the broadcast feature too, hidden or not.
#define EASY_CVAR_DECLARE_HASH_ARRAY\
	float* aryCVarHash[CVAR_CLIENTSENDOFF_COUNT];\
	char* aryCVarHashName[CVAR_CLIENTSENDOFF_COUNT];

#define EASY_CVAR_EXTERN_HASH_ARRAY\
	extern float* aryCVarHash[];\
	extern char* aryCVarHashName[];

#endif

//Let the hash array know what variable this is.
#define EASY_CVAR_HASH(CVarName, ID)\
	aryCVarHash[ID] = &global2_##CVarName;\
	aryCVarHashName[ID] = #CVarName;


#ifdef _DEBUG
	// This is dummied, as ordinary DEBUGONLY (implied?) calls dont need to do hasing, change are immediate as
	// set by the user's own console.
	#define EASY_CVAR_HASH_CLIENTONLY(CVarName, ID)\
		DUMMY


#else
	//DEBUGONLY for here?  We need to hash it.
	#define EASY_CVAR_HASH_CLIENTONLY(CVarName, ID)\
	aryCVarHash[ID] = &global2_##CVarName;\
	aryCVarHashName[ID] = #CVarName;
	
#endif









#ifdef _DEBUG
//DUMMIED FOR DEBUG
#define EASY_CVAR_HIDDEN_ACCESS_DEBUGONLY(CVarName, CVarNameLower)
#define EASY_CVAR_HIDDEN_ACCESS_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName, CVarNameLower, ID)
#define EASY_CVAR_HIDDEN_ACCESS_CLIENTONLY_DEBUGONLY(CVarName, CVarNameLower, ID)

#else
//RELEASE


/*
#define EASY_CVAR_HIDDEN_ACCESS_DEBUGONLY(CVarName, CVarNameLower)\
if( FStrEq(pcmdRefinedRef, #CVarNameLower)  ){\
	CBasePlayer* tempplayer = GetClassPtr((CBasePlayer *)pev);\
	int argCount = CMD_ARGC();\
	if(argCount > 2){easyForcePrintLineClient(pEntity, "WARNING: only one term after a CVar allowed, further terms ignored.");}\
	if(argCount == 1){\
		easyForcePrintLineClient(pEntity, "\"%s\" is %g",#CVarName,global_##CVarName);\
	}else{\
		const char* arg1ref = CMD_ARGV(1);\
		float tempF = 0;\
		try{\
			tempF = tryStringToFloat(arg1ref);\
			EASY_CVAR_SET_DEBUGONLY(CVarName, tempF)\
			g_queueCVarHiddenSave = TRUE;\
		}catch(int){\
			easyForcePrintLineClient(pEntity, "ERROR: Bad input. No effect.");\
		}\
	}\
	return;\
}


#define EASY_CVAR_HIDDEN_ACCESS_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName, CVarNameLower, ID)\
if( FStrEq(pcmdRefinedRef, #CVarNameLower) ){\
	CBasePlayer* tempplayer = GetClassPtr((CBasePlayer *)pev);\
	int argCount = CMD_ARGC();\
	if(argCount > 2){easyForcePrintLineClient(pEntity, "WARNING: only one term after a CVar allowed, further terms ignored.");}\
	if(argCount == 1){\
		easyForcePrintLineClient(pEntity, "\"%s\" is %g",#CVarName,global_##CVarName);\
	}else{\
		const char* arg1ref = CMD_ARGV(1);\
		float tempF = 0;\
		try{\
			tempF = tryStringToFloat(arg1ref);\
			EASY_CVAR_SET_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName, tempF)\
			g_queueCVarHiddenSave = TRUE;\
		}catch(int){\
			easyForcePrintLineClient(pEntity, "ERROR: Bad input. No effect.");\
		}\
	}\
	return;\
}




#define EASY_CVAR_HIDDEN_ACCESS_CLIENTONLY_DEBUGONLY(CVarName, CVarNameLower, ID)\
if( FStrEq(pcmdRefinedRef, #CVarNameLower) ){\
	CBasePlayer* tempplayer = GetClassPtr((CBasePlayer *)pev);\
	int argCount = CMD_ARGC();\
	if(argCount > 2){easyForcePrintLineClient(pEntity, "WARNING: only one term after a CVar allowed, further terms ignored.");}\
	if(argCount == 1){\
		EASY_CVAR_PRINT_CLIENTONLY(ID)\
	}else{\
		const char* arg1ref = CMD_ARGV(1);\
		float tempF = 0;\
		try{\
			tempF = tryStringToFloat(arg1ref);\
			CUSTOM_CLIENT_CALL(ID, tempF)\
		}catch(int){\
			easyForcePrintLineClient(pEntity, "ERROR: Bad input. No effect.");\
		}\
	}\
	return;\
}

*/

// CHANGED.  Now, put info in an array instead.  Saves lots of instructions and cuts
// the DLL size down by 150 kilobytes doing it this way instead of above.
#define EASY_CVAR_HIDDEN_ACCESS_DEBUGONLY(CVarName, CVarNameLower)\
	{#CVarName, #CVarNameLower, -1, &global_##CVarName, 0 },
#define EASY_CVAR_HIDDEN_ACCESS_CLIENTSENDOFF_BROADCAST_DEBUGONLY(CVarName, CVarNameLower, ID)\
	{#CVarName, #CVarNameLower, CVarName##_ID, &global_##CVarName, 1 },
#define EASY_CVAR_HIDDEN_ACCESS_CLIENTONLY_DEBUGONLY(CVarName, CVarNameLower, ID)\
	{#CVarName, #CVarNameLower, CVarName##_ID, NULL, 2 },






/*

//g_engfuncs.pfnCVarSetFloat
//g_engfuncs.pfnCVarGetPointer

//EASY_CVAR_SET_DEBUGONLY(CVarName, tempF)\


*/






/*
#define EASY_CVAR_CLIENTSENDOFF(CVarName, ID)\
	else if(argID == ID){\
		global2_##CVarName = arg;\
		if(global2_hiddenMemPrintout)easyForcePrintLineClient(pEntity, "CVAR DEBUG: Client: found ID %d. Set CVar %s to %g", ID, #CVarName, arg);\
	}
*/


#define EASY_CVAR_PRINT_CLIENTONLY(ID)\
	MESSAGE_BEGIN( MSG_ONE, gmsgPrintClientCVar, NULL, pev );\
		WRITE_SHORT( ID );\
	MESSAGE_END();




//NOTE: currently unsure of the best way to do handling sending off client CVars.

//Looks like if it's at startup (pev is "null"), you can do without the PEV ("Broadcast").
//Otherwise, just involve the PEV.   (PEV is the player's own vars?).
//(if-thens are presently in reverse order of the aforementioned)



//Nope, just let edits to CLIENTSENDOFF_BROADCAST_DEBUGONLY make a send to the client.
/*
	if(globalMEM_##CVarName != global_##CVarName || globalPSEUDO_queueClientSendoff){\
		globalMEM_##CVarName = global_##CVarName;\
		if(pev != NULL){\
			MESSAGE_BEGIN( MSG_ALL, gmsgUpdateClientCVar, NULL);\
				WRITE_SHORT( ID);\
				WRITE_SHORT( global_##CVarName*100);\
			MESSAGE_END();\
		}\
	}
*/


/*
#define EASY_CVAR_UPDATE_SERVER_DEBUGONLY_CLIENTSENDOFF(CVarName, ID)\
	if(globalMEM_##CVarName != global_##CVarName){\
		globalMEM_##CVarName = global_##CVarName;\
		if(pev != NULL){\
			MESSAGE_BEGIN( MSG_ONE, gmsgUpdateClientCVar, NULL, pev );\
				WRITE_SHORT( ID);\
				WRITE_SHORT( global_##CVarName*100);\
			MESSAGE_END();\
		}else{\
			MESSAGE_BEGIN( MSG_BROADCAST, gmsgUpdateClientCVar );\
				WRITE_SHORT( ID);\
				WRITE_SHORT( global_##CVarName*100);\
			MESSAGE_END();\
		}\
	}
*/




#endif

//Dummied!
//#define EASY_CVAR_CLIENTSENDOFF(CVarName, ID)











////////////////////////////////////////////////////////////////////////////////////////////








#define EASY_CVAR_EXTERN_CLIENT(CVarName)\
	extern float global2_##CVarName;

#define EASY_CVAR_EXTERN_SERVER(CVarName)\
	extern float global_##CVarName;





//!!!! REPLACE
//#define EASY_CVAR_PRINTIF_PRE(requirementName, weee)\
//if(global_##requirementName == 1){\
//	weee;\
//}
#define EASY_CVAR_PRINTIF_PRE(requirementName, weee)\
if(EASY_CVAR_GET(requirementName) == 1){\
	weee;\
}



#define EASY_CVAR_GET_CLIENT(CVarName)\
	global2_##CVarName;

#define EASY_CVAR_GET_SERVER(CVarName)\
	global_##CVarName;








#ifdef CLIENT_DLL

#define EASY_CVAR_HIDDEN_SAVE(CVarName)\
	fprintf(myFile, "%s %g\n", QUOTE(CVarName), global2_##CVarName);

#define EASY_CVAR_HIDDEN_SAVE_CLIENTONLY(CVarName) EASY_CVAR_HIDDEN_SAVE(CVarName)

#define EASY_CVAR_HIDDEN_SAVE_SERVERONLY(CVarName)
#else

#define EASY_CVAR_HIDDEN_SAVE(CVarName)\
	fprintf(myFile, "%s %g\n", QUOTE(CVarName), global_##CVarName);

#define EASY_CVAR_HIDDEN_SAVE_CLIENTONLY(CVarName)
#define EASY_CVAR_HIDDEN_SAVE_SERVERONLY(CVarName) EASY_CVAR_HIDDEN_SAVE(CVarName)
#endif


	//myfile << QUOTE(CVarName) << " " << global_##CVarName << "\n";
	//Now now, that's not the C way of doing it. No C++ for you scallywags!
	//

/*
#define EASY_CVAR_HIDDENLOAD(CVarName, CVarNameLower)\
	else if(strcmp(identifier, QUOTE(CVarNameLower) ) == 0){\
		global_##CVarName = value;\
	}
*/



#ifdef CLIENT_DLL

//!!!!
#define EASY_CVAR_HIDDEN_LOAD(CVarName, CVarNameLower)\
	if(strcmp(identifier, QUOTE(CVarNameLower) ) == 0){\
		global2_##CVarName = value;\
		return;\
	}

#define EASY_CVAR_HIDDEN_LOAD_CLIENTONLY(CVarName, CVarNameLower) EASY_CVAR_HIDDEN_LOAD(CVarName, CVarNameLower)
#define EASY_CVAR_HIDDEN_LOAD_SERVERONLY(CVarName, CVarNameLower)
#else


//!!!!
#define EASY_CVAR_HIDDEN_LOAD(CVarName, CVarNameLower)\
	if(strcmp(identifier, QUOTE(CVarNameLower) ) == 0){\
		global_##CVarName = value;\
		return;\
	}

#define EASY_CVAR_HIDDEN_LOAD_CLIENTONLY(CVarName, CVarNameLower)
#define EASY_CVAR_HIDDEN_LOAD_SERVERONLY(CVarName, CVarNameLower) EASY_CVAR_HIDDEN_LOAD(CVarName, CVarNameLower)
#endif

//COMPILE COMPATABILITY: is a blank #define like this okay?
#define DUMMY




#endif //END OF CVAR_CUSTOM_H


